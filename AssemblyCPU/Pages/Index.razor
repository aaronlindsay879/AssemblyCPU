@page "/"
@using Backend
@using Components

<div style="float: left; margin-right: 10px; width: auto;">
    <table class="table-auto">
        <tr>
            <td>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="Compile">Compile</button>
            </td>
            <td>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="Pulse">Pulse</button>
            </td>
            <td>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="Cycle">Cycle</button>
            </td>
            <td>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="RunToggle">@RunText</button>
            </td>
            <td>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="Reset">Reset</button>
            </td>
        </tr>
        <tr>
            <td colspan="5">
                <span>Current instruction (MAR): @cpu.Instance.SpecialReg["MAR"].Data</span>
            </td>
        </tr>
        <tr>
            <td colspan="5">
                <span>Next state: @cpu.State</span>
            </td>
        </tr>
        <tr>
            <td colspan="5">
                <span>Is halted: @cpu.Instance.Halted</span>
            </td>
        </tr>
        <tr>
            <td colspan="5">
                <span>Speed: </span>
                <input type="number" step="1" min="1" max="10" style="width: 10%;" @bind-value="Speed" @bind-value:event="onchange" />
            </td>
        </tr>
    </table>

    <textarea id="code" class="border-black border-2" style="width: 100%; height: 600px;"
              @bind-value="Content" @bind-value:event="oninput" spellcheck="false" />
</div>


<div style="display: inline-block; margin-right: 10px;">
    <AssemblyCPU.Components.GeneralStorage Cols="10" Rows="10" Name="RAM" Data="@cpu.Instance.GeneralReg["RAM"]" />
</div>

<div style="display: inline-block; margin-right: 10px;">
    <AssemblyCPU.Components.GeneralStorage Cols="1" Rows="8" Name="General Registers" Data="@cpu.Instance.GeneralReg["Registers"]" />
</div>

<div style="display: inline-block; margin-right: 10px;">
    <AssemblyCPU.Components.SpecialStorage Cols="1" Rows="5" Name="Special Registers" Registers="@cpu.Instance.SpecialReg" />
</div>

@code  {
        CPU cpu;
    public string Content { get; set; }

    private float _speed { get; set; }
    public float Speed
    {
        get => _speed;
        set => _speed = Math.Max(Math.Min(value, 10), 0);
    }

    public string RunText { get; set; }
    private System.Timers.Timer _timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        RunText = "Run";
        _speed = 5;
        cpu = new CPU(8, 100);

        Content = "MOV R0,#0b10101\n" +
                  "MOV R1,#0x1C\n" +
                  "MOV R2,#10\n" +
                  "LSL R3,R0,#2\n\n" +
                  "CMP R0,R1\n" +
                  "BNE notEqual\n" +
                  "STR R2,90\n" +
                  "HALT\n\n" +
                  "notEqual: STR R3,90\n" +
                  "HALT";

        _timer = new System.Timers.Timer((int)(1000 / _speed));
        _timer.Elapsed += (s, e) => {
            cpu.Pulse();

            if (cpu.Instance.Halted)
            {
                RunText = "Run";
                _timer.Enabled = false;
            }

            StateHasChanged();
        };
        _timer.AutoReset = true;
    }

    void Compile(EventArgs e)
    {
        Backend.Program.CompileProgram(cpu.Instance, Content);
    }

    void Pulse(EventArgs e)
    {
        cpu.Pulse();
    }

    void Cycle(EventArgs e)
    {
        cpu.Cycle();
        StateHasChanged();
    }

    void RunToggle(EventArgs e)
    {
        if (RunText == "Run")
        {
            RunText = "Stop";

            _timer.Interval = (int)(1000 / _speed);
            _timer.Enabled = true;
        }
        else
        {
            RunText = "Run";
            _timer.Enabled = false;
        }
    }

    void Reset(EventArgs e)
    {
        RunText = "Run";
        _timer.Enabled = false;
        cpu.RegenerateInstance();
    }
}