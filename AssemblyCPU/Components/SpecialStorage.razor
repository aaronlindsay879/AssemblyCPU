@using Backend 

<center>
    <Table Name="@Name" Rows="@Rows" Cols="@Cols" Tooltip="@GetTooltip" Index="@GetName" Value="@GetValue" />

    <RadioSelection Name="@Name" DefaultItem="@DefaultItem" Items="@Items" OnRadioChanged="@OnRadioChanged" />
</center>

@code {
    [Parameter] public string Name { get; set; }
    [Parameter] public Dictionary<string, Backend.SpecialStorage> Registers { get; set; }

    [Parameter] public int Rows { get; set; }
    [Parameter] public int Cols { get; set; }

    [Parameter] public string DefaultItem { get; set; } = "binary";
    [Parameter] public string[] Items { get; set; } = new[] { "binary", "decimal", "hex" };

    private string _radioValue;

    public void OnRadioChanged(string value)
    {
        _radioValue = value;
    }

    public string GetName(int row, int col)
    {
        return Registers.Keys.ToArray()[(row * Cols) + col];
    }

    public string GetTooltip(int row, int col)
    {
        string name = GetName(row, col);

        return Registers[name].Tooltip;
    }

    public string GetValue(int row, int col)
    {
        //Find name and calculate base based upon selected value
        string name = GetName(row, col);
        int b = _radioValue switch
        {
            "binary" => 2,
            "decimal" => 10,
            "hex" => 16,
            _ => 10
        };

        //Convert the value into the wanted base
        string value = Convert.ToString(Registers[name].Data, b);

        string output = "";
        if (b != 10 && value != "0")
        {
            //Find the chunk size such that 1 chunk represents 256 states (such as 2 hex chars)
            int chunkSize = (int)Math.Log(256, b);

            //Calculate the length needed to get to next multiple of chunkSize, and pad to that size
            int padAmount = (int)(chunkSize * Math.Ceiling(value.Length / (float)chunkSize));
            value = value.PadLeft(padAmount, '0');

            //Select chunks in the given size, interlace with spaces
            for (int i = 0; i <= value.Length - chunkSize; i += chunkSize)
                output += value.Substring(i, chunkSize) + " ";
        }
        else
        {
            output = value;
        }

        return output.ToUpper();
    }
}
